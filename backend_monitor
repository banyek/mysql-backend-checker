#!/usr/bin/env python

import sys
import ConfigParser
import threading
import time
import daemon
import logging
import MySQLdb
import os
from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
from daemon import runner
from datetime import datetime

class DBCheck(threading.Thread):
  def __init__(self, mysqlconf):
    self.mysql_host = mysqlconf["mysql_host"][0]
    self.mysql_user = mysqlconf["mysql_user"][0]
    self.mysql_password = mysqlconf["mysql_password"][0]
    self.mysql_database = mysqlconf["mysql_database"][0]
    super(DBCheck, self).__init__()
    logging.warning("MySQLWorker created")

  def run(self):
    while True:
      db = MySQLdb.connect(host=self.mysql_host, user=self.mysql_user, passwd=self.mysql_password, db=self.mysql_database)
      dbcursor = db.cursor()
      dbcursor.execute("show variables like 'read_only'")
      state = dbcursor.fetchone();
      global CACHE
      if state[1] == 'ON':
        CACHE = "NOT OK"
      else:
        CACHE = "OK"
      #logging.debug(CACHE)
      db.close()
      time.sleep(1)

class HttpHandler(BaseHTTPRequestHandler):

  def do_GET(self):
        global CACHE
        if CACHE == "OK":
          self.send_response(200)
#          self.send_header('Content-type','text/html')
#          self.end_headers()
#          self.wfile.write(CACHE)
          return
        else:
          self.send_response(500)
#          self.send_header('Content-type','text/html')
#          self.end_headers()
#          self.wfile.write(CACHE)
          return


class HttpFront(threading.Thread):

 def __init__(self, httpconf):
  self.http_port = httpconf["port"][0]
  super(HttpFront, self).__init__()


 def run(self):
   server = HTTPServer(('', int(self.http_port)), HttpHandler)
   logging.warning("HTTP frontend create on port %s" % self.http_port )
   server.serve_forever()


def configreader(config, section):
  cnf = ConfigParser.RawConfigParser()
  cnf.read(config)
  configItems = cnf.items(section)
  configuration = {}
  for key, value in configItems:
    configuration.setdefault(key, []).append(value)
  return configuration

class BackendChecker(object):

  def __init__(self,daemonconf,configfile):
    self.configfile = configfile
    self.logfile_path = daemonconf['logfile_path'][0]
    self.pidfile_path = daemonconf['pidfile_path'][0]
    self.stdin_path = '/dev/null'
    self.stdout_path = self.logfile_path
    self.stderr_path = self.logfile_path
    self.pidfile_timeout = 5

  def run(self):
    mysqlconf = configreader(self.configfile, 'mysql')
    httpconf  = configreader(self.configfile, 'http')
    logging.basicConfig(filename=self.logfile_path, level=logging.DEBUG, format='%(asctime)s %(message)s')
    logging.debug('start')
    dbcheck = DBCheck(mysqlconf)
    httpfront = HttpFront(httpconf)
    dbcheck.start()
    httpfront.start()
    while True:
      time.sleep(1.0)

def main():

	CACHE="NOT OK"
	configfile = os.getenv('BACKEND_CHECKERCFG', '/usr/local/bin/backend_monitor.cfg')
	daemonconf = configreader(configfile, 'daemon')
	backendchecker = BackendChecker(daemonconf,configfile)
	backendchecker_runner = runner.DaemonRunner(backendchecker)
	backendchecker_runner.do_action()


if __name__ == '__main__':
  main()
